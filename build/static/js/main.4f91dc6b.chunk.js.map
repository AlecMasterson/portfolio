{"version":3,"sources":["serviceWorker.js","components/MainNavBarItem.js","components/NavBar.js","components/WorkExperience.js","components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","MainNavBarItem","props","index","currentPageIndex","pages","changePage","classes","currentPageName","className","onClick","NavBar","title","navItems","map","item","key","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","WorkExperience","App","state","this","currentPage","pageIndex","setState","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCESC,MAlBf,SAAwBC,GACpB,IAAMC,EAAQD,EAAMC,MAChBC,EAAmBF,EAAME,iBACvBC,EAAQH,EAAMG,MACdC,EAAaJ,EAAMI,WAErBC,EAAU,WACVJ,IAAUC,IAAkBG,GAAW,WAE3C,IAAIC,EAAkBH,EAAMF,GAAN,KAEtB,OACI,wBAAIM,UAAWF,EAASG,QAAS,kBAAMJ,EAAWH,KAC9C,0BAAMM,UAAU,YAAYD,KCezBG,MA3Bf,SAAgBT,GACZ,IAAMU,EAAQV,EAAMU,MAChBR,EAAmBF,EAAME,iBACvBC,EAAQH,EAAMG,MACdC,EAAaJ,EAAMI,WAErBO,EAAWR,EAAMS,KAAI,SAACC,EAAMZ,GAAP,OACrB,kBAAC,EAAD,CAAgBa,IAAKb,EAAOA,MAAOA,EAAOC,iBAAkBA,EAAkBC,MAAOA,EAAOC,WAAYA,OAG5G,OACI,yBAAKG,UAAU,4CACX,0BAAMA,UAAU,eAAeQ,KAAK,KAAKL,GACzC,4BAAQH,UAAU,iBAAiBS,KAAK,SAASC,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC1J,0BAAMd,UAAU,yBAGpB,yBAAKe,GAAG,aAAaf,UAAU,oDAC3B,8BACA,wBAAIA,UAAU,cACTI,MCRNY,MAbf,WACI,OACI,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,wCAAwC,SAE1D,yBAAKA,UAAU,aACV,yBC6BFiB,E,YAjCX,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KAEDG,MAAQ,CACT,CAAE,KAAQ,kBAAmB,QAAW,kBAAC,EAAD,OACxC,CAAE,KAAQ,YAAa,QAAW,MAClC,CAAE,KAAQ,YAAa,QAAW,MAClC,CAAE,KAAQ,aAAc,QAAW,OAGvC,EAAKsB,MAAQ,CAAE,iBAAoB,GAVpB,E,sEAaT,IAAD,OACCf,EAAQgB,KAAK1B,MAAMU,MACrBR,EAAmBwB,KAAKD,MAAMvB,iBAC5BC,EAAQuB,KAAKvB,MACfwB,EAAcxB,EAAMD,GAAN,QAElB,OACI,yBAAKK,UAAU,QACX,kBAAC,EAAD,CAAQG,MAAOA,EAAOR,iBAAkBA,EAAkBC,MAAOA,EAAOC,WAAY,SAACwB,GAAD,OAAe,EAAKC,SAAS,CAAE,iBAAoBD,OAEvI,yBAAKrB,UAAU,iCACX,yBAAKA,UAAU,8BACVoB,S,GA1BPG,IAAMC,WCExBC,IAASC,OAAO,kBAAC,EAAD,CAAKvB,MAAO,mBAAsBwB,SAASC,eAAe,SL2HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4f91dc6b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nfunction MainNavBarItem(props) {\n    const index = props.index;\n    let currentPageIndex = props.currentPageIndex;\n    const pages = props.pages;\n    const changePage = props.changePage;\n\n    let classes = \"nav-item\";\n    if (index === currentPageIndex) classes += \" active\";\n\n    let currentPageName = pages[index][\"name\"];\n\n    return (\n        <li className={classes} onClick={() => changePage(index)}>\n            <span className=\"nav-link\">{currentPageName}</span>\n        </li>\n    );\n}\n\nexport default MainNavBarItem;","import React from 'react';\nimport MainNavBarItem from './MainNavBarItem';\n\nfunction NavBar(props) {\n    const title = props.title;\n    let currentPageIndex = props.currentPageIndex;\n    const pages = props.pages;\n    const changePage = props.changePage;\n\n    let navItems = pages.map((item, index) =>\n        <MainNavBarItem key={index} index={index} currentPageIndex={currentPageIndex} pages={pages} changePage={changePage} />\n    );\n\n    return (\n        <nav className=\"navbar navbar-dark navbar-expand-lg py-3\">\n            <span className=\"navbar-brand\" href=\"#\">{title}</span>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mainNavBar\" aria-controls=\"mainNavBar\" aria-expanded=\"false\" aria-label=\"Toggle Navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div id=\"mainNavBar\" className=\"collapse navbar-collapse justify-content-between\">\n                <div></div>\n                <ul className=\"navbar-nav\">\n                    {navItems}\n                </ul>\n            </div>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React from 'react';\n\nfunction WorkExperience() {\n    return (\n        <div className=\"card\">\n            <div className=\"card-header\">\n                <h2 className=\"font-weight-bold text-uppercase mb-0\">{\"AT&T\"}</h2>\n            </div>\n            <div className=\"card-body\">\n                {\"Details Coming Soon\"}\n            </div>\n        </div>\n    );\n}\n\nexport default WorkExperience;","import React from 'react';\nimport NavBar from './NavBar';\nimport WorkExperience from './WorkExperience';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.pages = [\n            { \"name\": \"WORK EXPERIENCE\", \"element\": <WorkExperience /> },\n            { \"name\": \"EDUCATION\", \"element\": null },\n            { \"name\": \"PORTFOLIO\", \"element\": null },\n            { \"name\": \"CONTACT ME\", \"element\": null }\n        ];\n\n        this.state = { \"currentPageIndex\": 0 };\n    }\n\n    render() {\n        const title = this.props.title;\n        let currentPageIndex = this.state.currentPageIndex;\n        const pages = this.pages;\n        let currentPage = pages[currentPageIndex][\"element\"];\n\n        return (\n            <div className=\"body\">\n                <NavBar title={title} currentPageIndex={currentPageIndex} pages={pages} changePage={(pageIndex) => this.setState({ \"currentPageIndex\": pageIndex })} />\n\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"container-fluid col-8 my-4\">\n                        {currentPage}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nReactDOM.render(<App title={\"Alec Masterson\"} />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}